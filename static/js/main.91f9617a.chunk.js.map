{"version":3,"sources":["util/network.ts","config/config.ts","redux/actions/index.tsx","redux/reducers/app.tsx","redux/reducers/index.tsx","store.tsx","components/atoms/Button.tsx","components/atoms/input.tsx","screens/dashboard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["axios","defaults","headers","common","requestAPICall","endpoint","payload","a","request","Object","entries","length","get","url","resolve","post","then","res","result","catch","err","alert","RESET_ALL","CHANGE_STATE","REMOVE_STEP","STEPS","NAVIGATION","CONTENT_MODE","defaultState","values","step","combineReducers","app","state","action","type","currentStep","persistConfig","key","storage","persistedReducer","persistReducer","mainReducer","store","createStore","applyMiddleware","thunk","logger","persistor","persistStore","Button","this","props","text","callback","destroyProgressCallback","completed","selected","classes","styles","container","push","className","css","onClick","cancel","React","Component","StyleSheet","create","display","background","padding","fontSize","borderRadius","marginBottom","justifyContent","cursor","color","Input","event","target","value","onChange","handleChange","bind","placeholder","htmlFor","title","Dashboard","pdfRef","metadata","createRef","cropping","mousePos","X","Y","config","subject_id","topic_id","difficulty","summary","document","addEventListener","onMouseMove","onKeyDown","onKeyUp","enteredAnswer","parseInt","prompt","moveToNextStep","options","1","2","3","4","correct_answer","mode","content","JSON","stringify","image","optionText","isCorrect","console","log","submit","sourceCanvas","left","top","width","height","destCanvas","createElement","getContext","drawImage","setState","clientX","clientY","keyCode","Math","abs","body","style","getElementById","textContent","html2canvas","querySelector","scale","canvas","new_canvas","cropCanvas","toDataURL","ctrlKey","metaKey","navigator","clipboard","readText","id","appendChild","isQuestion","isAnswer1","isAnswer2","isAnswer3","isAnswer4","isCorrectAnswer","stepsSection","stepsHeading","buttonsContainer","updateTopicId","updateSubjectId","updateDifficulty","updateSummary","flex","flexDirection","alignItems","mapDispatchToProps","dispatch","resetAll","data","connect","App","loading","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91f9617a.chunk.js","sourcesContent":["import axios from \"axios\";\nimport url from \"url\";\nimport {serverName} from \"../config/config\";\n\naxios.defaults.headers.common['Authorization'] = `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMSwicm9sZSI6InN0YW5kYXJkIiwiaWF0IjoxNTcwOTcyMzU1fQ.GP0vPy5R5UqFcrLSg_EovQAZkgeoszAR6OdTg1oJYHU`;\n\n// Send API Request and execute function in case of request fail.\nexport const requestAPICall = async (endpoint, payload) => {\n    let result: any;\n    const request = Object.entries(payload).length === 0 ? axios.get(url.resolve(serverName, endpoint)) : axios.post(url.resolve(serverName, endpoint), payload);\n    await request\n    .then((res) => {\n        result = res;\n    }).catch((err) => {\n        alert(\"Your Internet is not on\");\n        throw err;\n    });\n    return result;\n};\n","export const serverName = \"https://backend.prepstart.co/\";\n","import { any } from \"prop-types\";\nimport { requestAPICall } from \"../../util/network\";\n\nexport const RESET_ALL = \"RESET_ALL\";\nexport const CHANGE_STATE = \"CHANGE_STATE\";\nexport const REMOVE_STEP = \"REMOVE_STEP\";\n\nexport const STEPS = {\n    QUESTION: 1,\n    ANSWER_1: 2,\n    ANSWER_2: 3,\n    ANSWER_3: 4,\n    ANSWER_4: 5,\n    CORRECT_ANSWER: 6,\n    SUBMIT: 7\n}\n\nexport const NAVIGATION = {\n    [STEPS.QUESTION]: STEPS.ANSWER_1,\n    [STEPS.ANSWER_1]: STEPS.ANSWER_2,\n    [STEPS.ANSWER_2]: STEPS.ANSWER_3,\n    [STEPS.ANSWER_3]: STEPS.ANSWER_4,\n    [STEPS.ANSWER_4]: STEPS.CORRECT_ANSWER,\n    [STEPS.CORRECT_ANSWER]: STEPS.SUBMIT,\n};\n\nexport const CONTENT_MODE = {\n    TEXT: 1,\n    IMAGE: 2\n};\nexport const resetAll =  () => {\n    return async(dispatch: any) => {\n        dispatch({type: RESET_ALL});\n    };\n}\n\nexport const moveToNextStep = (currentStep: number, values: any) => {\n    return async(dispatch: any) => {\n        dispatch({type: CHANGE_STATE, values, currentStep, step: NAVIGATION[currentStep]});\n    };\n};\n\nexport const removeStep =  (step: number) => {\n    return async (dispatch: any) => {\n        dispatch({type: REMOVE_STEP, step});\n    };\n}\n\nexport const submit = (payload: any, callback: any) => {\n    return async (dispatch: any) => {\n        dispatch({type: RESET_ALL});\n        const result = await requestAPICall(\"/createQuestion\", payload);\n        callback(result.data);\n    }\n}","import {STEPS, CHANGE_STATE, REMOVE_STEP, RESET_ALL} from \"../actions/\";\n\nconst defaultState = {\n    values: {},\n    step: STEPS.QUESTION\n};\n\nexport function app(state = defaultState, action: any) {\n      switch (action.type) {\n        case CHANGE_STATE:\n            return{\n                ...state,\n                step: action.step,\n                values: {\n                    ...state.values,\n                    [action.currentStep]: action.values\n                }\n            }\n        case REMOVE_STEP:\n            return {\n                ...state,\n                values: {\n                    ...state.values,\n                    [action.step]: null\n                }\n            }\n        case RESET_ALL:\n            return defaultState;\n        default:\n          return state;\n      }\n}\n","import { combineReducers } from \"redux\";\nimport {app} from \"./app\";\nexport default combineReducers({app} as any);","import { applyMiddleware, createStore } from \"redux\";\nimport logger from \"redux-logger\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from \"redux-thunk\";\nimport mainReducer from \"./redux/reducers\";\n\n// Persist Middleware for react redux\nconst persistConfig = {\n    key: \"parser\",\n    storage,\n};\nconst persistedReducer = persistReducer(persistConfig, mainReducer);\nexport const store = createStore(persistedReducer, {}, applyMiddleware(thunk, logger));\nexport const persistor = persistStore(store, null);\n","import React from 'react';\nimport { StyleSheet, css } from 'aphrodite';\n\ninterface iProps{\n    text: string;\n    callback?: any;\n    destroyProgressCallback?: any;\n    completed?: boolean;\n    selected?: boolean;\n}\nexport default class Button extends React.Component<iProps, {}>{\n\n    render() {\n        const {text, callback, destroyProgressCallback, completed, selected} = this.props;\n        // console.log(this.props.selected);\n        const classes = [styles.container];\n        if(selected){\n            classes.push(styles.selected);\n        }\n        return (\n            <div className={css(...classes)} onClick={callback} >\n                <div className={css(styles.text)}>{text}</div>\n                {completed && <div className={css(styles.cancel)} onClick={destroyProgressCallback}></div>}\n            </div>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        display: \"flex\",\n        background: \"#272727\",\n        padding: \"0.8rem 2rem\",\n        fontSize: \"1.1rem\",\n        borderRadius: \"1px\",\n        marginBottom: \"1rem\",\n        justifyContent: \"center\",\n        cursor: \"pointer\"\n    },\n    selected: {\n        background: \"green\"\n    },\n    text: {\n        color: \"#fff\"\n    },\n    cancel: {\n        color: \"#fff\"\n    }\n});","import React from 'react';\nimport { StyleSheet, css } from 'aphrodite';\nimport \"./input.css\";\n\ninterface iProps {\n    placeholder?: string;\n    value?: string;\n    callback?: any;\n    title?: string;\n};\nexport default class Input extends React.Component<iProps, any>{\n    constructor(props: iProps) {\n        super(props);\n    }\n    handleChange(event) {\n        this.props.callback(event.target.value);\n    }\n    render() {\n        return (\n            <div className=\"text-input\">\n                <input type=\"text\" onChange={this.handleChange.bind(this)} value={this.props.value} placeholder={this.props.placeholder} />\n                <label htmlFor=\"input1\">{this.props.title}</label>\n            </div>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n\n});","import React, { Component, Ref, RefObject, MutableRefObject } from 'react';\nimport { connect } from 'react-redux';\nimport PDFViewer from '../../components/molecules/Pdf';\nimport { StyleSheet, css } from 'aphrodite';\nimport Button from \"../../components/atoms/Button\";\nimport { STEPS, CONTENT_MODE, moveToNextStep, resetAll, submit } from \"../../redux/actions\";\nimport PDFJSBackend from \"../../backends/pdfjs\";\nimport html2canvas from \"html2canvas\";\nimport {requestAPICall} from \"../../util/network\";\nimport Input from '../../components/atoms/input';\n\ninterface iProps {\n\n};\ninterface iState {\n\n};\n\nconst DEFAULT_SCALE = 1;\n// question_details: { title: string, hint?: string, difficulty?: string, metadata?: any, image?: string, topic_id?: number, subject_id?: number, mode?: number, options: Array<{ optionText: string, mode?: number, isCorrect: boolean }>, summary?: string, ref?: number }\nclass Dashboard extends Component<any, any>{\n    pdfRef: any;\n    metadata: any;\n\n    constructor(props: iProps) {\n        super(props);\n        this.pdfRef = React.createRef();\n        this.state = {\n            cropping: {\n                value: false\n            },\n            mousePos: {\n                X: 0,\n                Y: 0\n            },\n            values: {\n\n            },\n            config: {\n                subject_id: 1,\n                topic_id: 19,\n                difficulty: \"easy\",\n                summary: \"Empty summary\"\n            }\n        }\n        this.metadata = {};\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"mousemove\", this.onMouseMove.bind(this), false);\n        document.addEventListener(\"keydown\", this.onKeyDown.bind(this), false);\n        document.addEventListener(\"keyup\", this.onKeyUp.bind(this), false);\n        //  console.log(this.pdfRef.current.contentWindow.document);\n    }\n\n    componentDidUpdate(){\n        if(this.props.step === STEPS.CORRECT_ANSWER){\n            const enteredAnswer = parseInt(prompt('Which is the correct answer?'));\n            this.moveToNextStep(enteredAnswer, CONTENT_MODE.TEXT);\n\n        }\n        if(this.props.step === STEPS.SUBMIT){\n            // Finally submit the form.\n            const title = this.props.values[STEPS.QUESTION];\n            const options = {\n                1: this.props.values[STEPS.ANSWER_1],\n                2: this.props.values[STEPS.ANSWER_2],\n                3: this.props.values[STEPS.ANSWER_3],\n                4: this.props.values[STEPS.ANSWER_4],\n            };\n            const correct_answer = this.props.values[STEPS.CORRECT_ANSWER];\n            const payload = {\n                title: this.props.values[STEPS.QUESTION].mode === CONTENT_MODE.TEXT ?  this.props.values[STEPS.QUESTION].content : null,\n                mode: this.props.values[STEPS.QUESTION].mode,\n                difficulty: this.state.config.difficulty,\n                metadata: JSON.stringify(this.metadata),\n                image: this.props.values[STEPS.QUESTION].mode === CONTENT_MODE.IMAGE ?  this.props.values[STEPS.QUESTION].content : null,\n                topic_id: parseInt(this.state.config.topic_id),\n                subject_id: parseInt(this.state.config.subject_id),\n                summary: this.state.config.summary,\n                options: [\n                    {\n                        optionText: options[1].content,\n                        mode: options[1].mode,\n                        isCorrect: correct_answer === 1\n                    },\n                    {\n                        optionText: options[2].content,\n                        mode: options[2].mode,\n                        isCorrect: correct_answer === 2\n                    },\n                    {\n                        optionText: options[3].content,\n                        mode: options[3].mode,\n                        isCorrect: correct_answer === 3\n                    },\n                    {\n                        optionText: options[4].content,\n                        mode: options[4].mode,\n                        isCorrect: correct_answer === 4\n                    }\n                ]\n\n            };\n            console.log(payload);\n            const _this = this;\n            this.props.submit(payload);\n        }\n    }\n\n    cropCanvas(sourceCanvas: HTMLCanvasElement, left: number, top: number, width: number ,height:number){\n        let destCanvas = document.createElement('canvas');\n        destCanvas.width = width;\n        destCanvas.height = height;\n        destCanvas.getContext(\"2d\").drawImage(\n            sourceCanvas,\n            left,top,width,height,  // source rect with content to crop\n            0,0,width,height);      // newCanvas, same size as source rect\n        return destCanvas;\n    }\n    async onMouseMove(event: MouseEvent){\n        this.setState({mousePos: {X: event.clientX, Y: event.clientY}});\n    }\n\n    async onKeyUp(event: KeyboardEvent){\n        if(this.state.cropping.value && event.keyCode==16){\n            const width = Math.abs(this.state.mousePos.X - this.state.cropping.clientX);\n            const height = Math.abs(this.state.mousePos.Y - this.state.cropping.clientY);\n            document.body.style.cursor=\"default\";\n            const style = document.getElementById(\"myStyle\");\n\n            if(style){\n                style.textContent = \"\";\n            }\n            const canvas = await html2canvas(document.querySelector(\"body\"), {scale: DEFAULT_SCALE});\n            const new_canvas = this.cropCanvas(canvas, this.state.cropping.clientX * DEFAULT_SCALE, this.state.cropping.clientY * DEFAULT_SCALE, width * DEFAULT_SCALE, height * DEFAULT_SCALE);\n            this.moveToNextStep(new_canvas.toDataURL(\"image/png\"), CONTENT_MODE.IMAGE);\n            this.setState({cropping: {value: false}});\n        }\n    }\n\n    moveToNextStep(content: any, mode: number) {\n        if(this.props.step !== STEPS.SUBMIT){\n            this.props.moveToNextStep(this.props.step, {content, mode});\n        }\n    }\n\n    async onKeyDown(event: KeyboardEvent) {\n        console.log(\"Presesd\");\n        const key = event.keyCode;\n        const ctrl = event.ctrlKey || event.metaKey;\n        if (ctrl && key == 67) {\n            // ctrl + c\n            console.log(\"LAA\");\n            const content = await navigator.clipboard.readText();\n            this.moveToNextStep(content, CONTENT_MODE.TEXT);\n        } else if(key == 16){\n            this.setState({cropping: {value: true, clientX: this.state.mousePos.X, clientY: this.state.mousePos.Y }});\n            // document.body.style.cursor=\"none\";\n            document.body.style.cursor=\"crosshair\";\n            const style: HTMLStyleElement = document.getElementById(\"myStyle\") ? document.getElementById(\"myStyle\") as HTMLStyleElement :  document.createElement(\"style\");\n            style.id = \"myStyle\";\n            style.textContent = `\n                .textLayer > span{\n                    cursor: crosshair;\n                    -webkit-touch-callout: none; /* iOS Safari */\n                    -webkit-user-select: none; /* Safari */\n                     -khtml-user-select: none; /* Konqueror HTML */\n                       -moz-user-select: none; /* Old versions of Firefox */\n                        -ms-user-select: none; /* Internet Explorer/Edge */\n                            user-select: none; /* Non-prefixed version, currently\n                                                  supported by Chrome, Opera and Firefox */\n                }\n            `\n            if(!document.getElementById(\"myStyle\")){\n                document.body.appendChild(style);\n            }\n        }\n    }\n\n    updateTopicId(value){\n        this.setState({...this.state, config: {...this.state.config, topic_id: value}})\n    }\n\n    updateSubjectId(value){\n        this.setState({...this.state, config: {...this.state.config, subject_id: value}})\n    }\n\n    updateSummary(value){\n        this.setState({...this.state, config: {...this.state.config, summary: value}})\n    }\n\n    updateDifficulty(value){\n        this.setState({...this.state, config: {...this.state.config, difficulty: value}})\n    }\n\n\n    render() {\n        const isQuestion = (this.props.step===STEPS.QUESTION);\n        const isAnswer1 = (this.props.step===STEPS.ANSWER_1);\n        const isAnswer2 = (this.props.step===STEPS.ANSWER_2);\n        const isAnswer3 = (this.props.step===STEPS.ANSWER_3);\n        const isAnswer4 = (this.props.step===STEPS.ANSWER_4);\n        const isCorrectAnswer = (this.props.step===STEPS.CORRECT_ANSWER);\n\n        return (\n            <div className={css(styles.container)}>\n                <div className={css(styles.stepsSection)}>\n                    <div className={css(styles.stepsHeading)}>Config</div>\n                    <div className={css(styles.buttonsContainer)}>\n                        <Input placeholder=\"Enter topic_id\" title=\"Topic\" value={this.state.config.topic_id} callback={this.updateTopicId.bind(this)}/>\n                        <Input placeholder=\"Enter subject_id\" title=\"Subject\" value={this.state.config.subject_id} callback={this.updateSubjectId.bind(this)}/>\n                        <Input placeholder=\"Enter difficulty\" title=\"Difficulty\" value={this.state.config.difficulty} callback={this.updateDifficulty.bind(this)}/>\n                        <Input placeholder=\"Enter summary\" title=\"Summary\" value={this.state.config.summary} callback={this.updateSummary.bind(this)}/>\n                    </div>\n                    <div className={css(styles.stepsHeading)}></div>\n                    <div className={css(styles.stepsHeading)}></div>\n                    <div className={css(styles.stepsHeading)}>Steps</div>\n                    <div className={css(styles.buttonsContainer)}>\n                        <Button text=\"Select Question\" selected={isQuestion}></Button>\n                        <Button text=\"Select Answer 1\" selected={isAnswer1}></Button>\n                        <Button text=\"Select Answer 2\" selected={isAnswer2}></Button>\n                        <Button text=\"Select Answer 3\" selected={isAnswer3}></Button>\n                        <Button text=\"Select Answer 4\" selected={isAnswer4}></Button>\n                        <Button text=\"Select Correct Answer\" selected={isCorrectAnswer}></Button>\n                    </div>\n\n                </div>\n            </div>\n        )\n    };\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        display: \"flex\",\n        background: \"#fff\"\n    },\n    stepsSection: {\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"100%\",\n        height: \"100vh\",\n        fontSize: '1.3rem'\n    },\n    buttonsContainer: {\n\n    },\n    stepsHeading: {\n        marginBottom: \"1rem\"\n    }\n});\n\nconst mapStateToProps = ({ app }: any) => ({\n    step: app.step,\n    values: app.values\n});\n\nconst mapDispatchToProps = {\n    moveToNextStep,\n    resetAll,\n    submit\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps,\n)(Dashboard);","import React from 'react';\nimport logo from './logo.svg';\nimport './css/App.css';\nimport { Provider } from 'react-redux';\n\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from 'redux-persist/integration/react';\nimport Dashboard from './screens/dashboard';\n\ninterface iProps {\n\n};\n\ninterface iState {\n\n};\n\nexport default class App extends React.Component<iProps, iState> {\n\n  constructor(props: iProps) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <PersistGate loading={<div>Loading...</div>} persistor={persistor}>\n          <Dashboard />\n        </PersistGate>\n      </Provider>\n    )\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('sidebarElement'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}